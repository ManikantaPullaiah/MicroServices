Spring Cloud Sleuth & Zipkin:-
==============================
 -> Spring Cloud Sleuth component is provided distributed tracing.
 
 -> It adds a trace and span id for all logs generated by the services.

 -> Spring Cloud Sleuth uses some filters for generating these id's and passing these id's to the system calls.

 -> It adds 3 pieces of information to the logs written a service.
       1) application name
       2) trace id
       3) span id

 -> Trace id is sometimes called as a correlation id and it's a unique string generated for the entire transaction.

 -> Span id a unique string generated for a particular path/part of the entire transaction.Each Microservice participating in a transaction will have a span id.

 -> we need to add spring-cloud-starter-sleuth dependency in pom.xml file.
  
 Step-1) add dependency in pom.xml file

                <dependency>
                 <groupId>org.springframework.cloud</groupId>
                 <artifactId>spring-cloud-starter-sleuth</artifactId>
                </dependency>

Step-2) add logs into services.





 -> Spring Cloud sleuth add logs and for tracking a request flow in microservices,one should go through all the logs for all microservices.

 -> Since, in real time applications,the services runs across the network,so it's difficult to trace the requests using that trace id.

 -> The solution is, use slueth and zipkin together.

ZIPKIN:-
=======

 -> Zipkin is an open-source data visualization tool which helps to aggregrate the logs generated by slueth in microservices.
 
 -> ZipKin will also helps us to gather timing data needed to resolve the latency problems in microservices.

 -> Zipkin server has internal components like 
      COLLECTOR
      STORAGE
      QUERY SERVICE
      WEB UI

 -> The trace data which is sent by slueth from microservices will arrive at zipkin collector,
    it validates the logs,then stores them into zipkin storage and also indexed.

 -> Zipkin by defualt uses in-memory database(h2) for storing the logs.But it also supports MYSQL,CASSANDRA AND ELSATIC SEARCH for storing the logs.

 -> Zipkin querry service is an api for extracting the data from storage 

 -> Web UI provides a way for viewing the traces based on service or time.
-----------------------------------------------------------------------------------------------------------------------
 Step-1) add dependency in pom.xml file.

              <dependency>
                 <groupId>org.springframework.cloud</groupId>
                 <artifactId>spring-cloud-sleuth-zipkin</artifactId>
                </dependency>

Step-2) add configuration properties in application.properties file.
             spring.sleuth.sampler.probability=1
             spring.zipkin.base-url=http://localhost:9441

Step-3) start the docker

Step-4) docker run -d -p 9411:9411 openzipkin/zipkin

Step-5) docker logs de49(cid).

Step-6) access the zipkin
         http://localhost:9411/zipkin
Step-7) send the request in postman
        http://localhost:/c/api/pl

  
